[{"D:\\Trabalho\\React\\smartinvest_ui\\src\\index.js":"1","D:\\Trabalho\\React\\smartinvest_ui\\src\\App.js":"2","D:\\Trabalho\\React\\smartinvest_ui\\src\\reportWebVitals.js":"3","D:\\Trabalho\\React\\smartinvest_ui\\src\\charts\\ChartComponent.jsx":"4","D:\\Trabalho\\React\\smartinvest_ui\\src\\charts\\CandleStickChart.jsx":"5","D:\\Trabalho\\React\\smartinvest_ui\\src\\charts\\ParseData.jsx":"6","D:\\Trabalho\\React\\smartinvest_ui\\src\\charts\\AssetSelector.jsx":"7","D:\\Trabalho\\React\\smartinvest_ui\\src\\charts\\interactiveutils.js":"8","D:\\Trabalho\\React\\smartinvest_ui\\src\\charts\\ChartOptions\\ChartOptions.jsx":"9","D:\\Trabalho\\React\\smartinvest_ui\\src\\common\\CrudTable\\CrudTable.jsx":"10","D:\\Trabalho\\React\\smartinvest_ui\\src\\common\\CrudTable\\CrudTableTitle\\CrudTableTitle.jsx":"11","D:\\Trabalho\\React\\smartinvest_ui\\src\\common\\CrudTable\\CrudTableHeader\\CrudTableHeader.jsx":"12","D:\\Trabalho\\React\\smartinvest_ui\\src\\common\\CrudTable\\CrudAddModal\\CrudAddModal.jsx":"13","D:\\Trabalho\\React\\smartinvest_ui\\src\\common\\CrudTable\\CrudTableRow\\CrudTableRow.jsx":"14","D:\\Trabalho\\React\\smartinvest_ui\\src\\common\\CrudTable\\CrudDeleteItemModal\\CrudDeleteItemModal.jsx":"15","D:\\Trabalho\\React\\smartinvest_ui\\src\\BatchOperations\\SavePortfolio.jsx":"16","D:\\Trabalho\\React\\smartinvest_ui\\src\\MainMenu.jsx":"17","D:\\Trabalho\\React\\smartinvest_ui\\src\\tables\\transactions\\Transactions.jsx":"18","D:\\Trabalho\\React\\smartinvest_ui\\src\\tables\\assets\\Assets.jsx":"19","D:\\Trabalho\\React\\smartinvest_ui\\src\\menu\\Menu.jsx":"20"},{"size":623,"mtime":1614722594549,"results":"21","hashOfConfig":"22"},{"size":1081,"mtime":1614723234711,"results":"23","hashOfConfig":"22"},{"size":375,"mtime":1612112678107,"results":"24","hashOfConfig":"22"},{"size":2717,"mtime":1614722594549,"results":"25","hashOfConfig":"22"},{"size":9040,"mtime":1612239233703,"results":"26","hashOfConfig":"22"},{"size":1731,"mtime":1612144893615,"results":"27","hashOfConfig":"22"},{"size":1445,"mtime":1614473176303,"results":"28","hashOfConfig":"22"},{"size":1026,"mtime":1612112678097,"results":"29","hashOfConfig":"22"},{"size":1131,"mtime":1613865548021,"results":"30","hashOfConfig":"22"},{"size":4778,"mtime":1614524511185,"results":"31","hashOfConfig":"22"},{"size":1069,"mtime":1613863850963,"results":"32","hashOfConfig":"22"},{"size":1359,"mtime":1614388788849,"results":"33","hashOfConfig":"22"},{"size":5176,"mtime":1614458371238,"results":"34","hashOfConfig":"22"},{"size":2452,"mtime":1614454649741,"results":"35","hashOfConfig":"22"},{"size":3059,"mtime":1614459464825,"results":"36","hashOfConfig":"22"},{"size":2099,"mtime":1614561321376,"results":"37","hashOfConfig":"22"},{"size":4777,"mtime":1614724246803,"results":"38","hashOfConfig":"22"},{"size":3892,"mtime":1614724284491,"results":"39","hashOfConfig":"22"},{"size":3458,"mtime":1614724284491,"results":"40","hashOfConfig":"22"},{"size":2835,"mtime":1614724156284,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7szlfc",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"48"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"54","usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Trabalho\\React\\smartinvest_ui\\src\\index.js",[],"D:\\Trabalho\\React\\smartinvest_ui\\src\\App.js",[],"D:\\Trabalho\\React\\smartinvest_ui\\src\\reportWebVitals.js",[],["90","91"],"D:\\Trabalho\\React\\smartinvest_ui\\src\\charts\\ChartComponent.jsx",["92"],"\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport CandleStickChart from './CandleStickChart';\r\nimport { getData } from \"./ParseData\";\r\n\r\nimport { TypeChooser } from \"react-stockcharts/lib/helper\";\r\nimport AssetSelector from './AssetSelector';\r\nimport ChartOptions from './ChartOptions/ChartOptions';\r\n\r\nclass ChartComponent extends React.Component {\r\n    state = {\r\n        indicators : {\r\n            \"ema10\" : true,\r\n            \"ema20\" : true} \r\n    };\r\n    constructor(props){\r\n        super(props)\r\n        this.assetSelectedEvent = this.assetSelectedEvent.bind(this);\r\n        this.toggleOption = this.toggleOption.bind(this);\r\n    }\r\n    \r\n    toggleOption(indicator, isChecked){\r\n        this.setState({\r\n            indicators : {\r\n                ...this.state.indicators,\r\n                [indicator] : isChecked} })\r\n\r\n    }\r\n\r\n\tcomponentDidMount() {\r\n        // if (this.state != null && this.state.assetCode != null)\r\n        //     getData(this.state.assetCode).then(assetData => {\r\n        //         this.setState({ \r\n        //             data: assetData.data})\r\n        //     });\r\n            // this.setState({data : getData()});\r\n\t}\r\n\trender() {\r\n\t\tif (this.state == null || this.state.data == null) {           \r\n\t\t\treturn (\r\n            <section>\r\n                <AssetSelector assetSelectedHandler={this.assetSelectedEvent}/>\r\n                <ChartOptions toggle={this.toggleOption} />\r\n                <div>{this.state.message}</div>\r\n            </section>\r\n            )\r\n        }\r\n\t\treturn (\r\n            <section>\r\n                <AssetSelector assetSelectedHandler={this.assetSelectedEvent} />\r\n                <ChartOptions toggle={this.toggleOption}  />\r\n                <div style={{\"clear\": \"both\"}}></div>\r\n                <h5 align=\"center\" style={{\"margin\": \"0\"}}> {this.state.assetCode} </h5>\r\n                <CandleStickChart type=\"hybrid\" data={this.state.data} indicators={this.state.indicators} />\r\n            </section>\r\n        )\r\n    }\r\n\r\n    assetSelectedEvent(newAssetCode){\r\n        this.setState({ assetCode: newAssetCode,\r\n                        data: null,\r\n                        message : ''});\r\n\r\n        getData(process.env.REACT_APP_API_KEY_ALPHA, newAssetCode).then(assetData => {\r\n            if(Object.keys(assetData).length === 0)\r\n                this.setState({ message: \"Error: Asset not found!\" });\r\n            else\r\n                this.setState({ \r\n                    data: assetData.data})\r\n        });\r\n        // ReactDOM.render(\r\n        //     <ChartComponent assetCode={this.state.assetCode}/>,\r\n        //         document.getElementById('chart')\r\n        // )\r\n    }\r\n}\r\n\r\nexport default ChartComponent;\r\n\r\nReactDOM.render(\r\n    <ChartComponent />,\r\n        document.getElementById('chart')\r\n)\r\n","D:\\Trabalho\\React\\smartinvest_ui\\src\\charts\\CandleStickChart.jsx",["93","94","95","96","97","98","99","100","101"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { format } from \"d3-format\";\r\nimport { timeFormat } from \"d3-time-format\";\r\n\r\nimport { ChartCanvas, Chart } from \"react-stockcharts\";\r\nimport { CandlestickSeries, LineSeries } from \"react-stockcharts/lib/series\";\r\nimport {MouseCoordinateY} from \"react-stockcharts/lib/coordinates\";\r\nimport { XAxis, YAxis } from \"react-stockcharts/lib/axes\";\r\nimport { fitWidth } from \"react-stockcharts/lib/helper\";\r\nimport { last, head } from \"react-stockcharts/lib/utils\";\r\nimport CrossHairCursor from 'react-stockcharts/lib/coordinates/CrossHairCursor';\r\n//count only days with data on x axis\r\nimport { discontinuousTimeScaleProvider } from \"react-stockcharts/lib/scale\";\r\n\r\nimport MouseCoordinateX from 'react-stockcharts/lib/coordinates/MouseCoordinateX';\r\n\r\n//Y axis markers\r\nimport { InteractiveYCoordinate, InteractiveText, DrawingObjectSelector } from \"react-stockcharts/lib/interactive\";\r\nimport { getMorePropsForChart } from \"react-stockcharts/lib/interactive/utils\";\r\nimport {\r\n\tgetInteractiveNodes,\r\n} from \"./interactiveutils\";\r\n\r\n//exponential average\r\nimport { ema } from \"react-stockcharts/lib/indicator\";\r\n\r\nfunction round(number, precision = 0) {\r\n\tconst d = Math.pow(10, precision);\r\n\treturn Math.round(number * d) / d;\r\n}\r\n\r\n// const buy = {\r\n// \t...InteractiveYCoordinate.defaultProps.defaultPriceCoordinate,\r\n// \tstroke: \"#1F9D55\",\r\n// \ttextFill: \"#1F9D55\",\r\n// \ttext: \"Buy 120\",\r\n// \tedge: {\r\n// \t\t...InteractiveYCoordinate.defaultProps.defaultPriceCoordinate.edge,\r\n// \t\tstroke: \"#1F9D55\"\r\n// \t}\r\n// };\r\n\r\nclass CandleStickChart extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\t\r\n\t\tthis.getInteractiveNodes = getInteractiveNodes.bind(this);\r\n\r\n\t\tthis.handleChoosePosition = this.handleChoosePosition.bind(this);\r\n\t\tthis.handleChooseTextPosition = this.handleChooseTextPosition.bind(this);\r\n\t\tthis.onDrawComplete = this.onDrawComplete.bind(this);\r\n\t\tthis.handleSelection = this.handleSelection.bind(this);\t\t\r\n\r\n\t\tthis.state = {\r\n\t\t\tenableInteractiveObject: true,\r\n\t\t\tyCoordinateList: [],\r\n\t\t\ttextList: [],\r\n\t\t\tshowModal: false,\r\n\t\t\t\t// [{\r\n\t\t\t\t// \t...buy,\r\n\t\t\t\t// \tyValue: 160.90,\r\n\t\t\t\t// \tid: 1,\r\n\t\t\t\t// \tdraggable: false,\r\n\t\t\t\t// }]\r\n\t\t\tcomparingMarkersActive: 0\t\r\n\t\t};\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst height = 400;\r\n\t\tconst { type, data: initialData, width, ratio } = this.props;\r\n\t\t\r\n\t\tconst margin = { left: 70, right: 70, top: 20, bottom: 30 };\r\n\r\n\t\tconst gridHeight = height - margin.top - margin.bottom;\r\n\t\tconst gridWidth = width - margin.left - margin.right;\r\n\r\n\t\tconst showGrid = true;\r\n\r\n\t\tconst candlesAppearance = {\r\n\t\t\tstroke: function stroke(d) { return d.close > d.open ? \"#6BA583\" : \"#DB0000\"},\r\n\t\t\twickStroke: function wickStroke(d) { return d.close > d.open ? \"#6BA583\" : \"#DB0000\"},\r\n\t\t\tfill: function fill(d) { return d.close > d.open ? \"#6BA583\" : \"#DB0000\"},\r\n\t\t\t// wickStroke: \"#000000\",\r\n\t\t\t// fill: function fill(d) {\r\n\t\t\t//   return d.close > d.open ? \"rgba(11, 196, 15, 0.8)\" : \"rgba(210, 11, 15, 0.8)\";\r\n\t\t\t// },\r\n\t\t\t// stroke: \"#000000\",\r\n\t\t\t// candleStrokeWidth: 1,\r\n\t\t\t// widthRatio: 0.8,\r\n\t\t\topacity: 0.7,\r\n\t\t}\r\n\r\n\t\tconst ema10 = ema()\r\n\t\t\t.id(1)\r\n\t\t\t.options({ windowSize: 10 })\r\n\t\t\t.merge((d, c) => {d.ema10 = c;})\r\n\t\t\t.accessor(d => d.ema10);\r\n\t\tema10(initialData);\r\n\r\n\t\tconst ema20 = ema()\r\n\t\t\t\t.id(2)\r\n\t\t\t\t.options({ windowSize: 20 })\r\n\t\t\t\t.merge((d, c) => {d.ema20 = c;})\r\n\t\t\t\t.accessor(d => d.ema20);\r\n\t\tema20(initialData);\r\n\t\tlet lineseriesEma10 = '';\r\n\t\tlet lineseriesEma20 = '';\r\n\t\tif(this.props.indicators[\"ema10\"]){\t\r\n\t\t\tlineseriesEma10 = <LineSeries yAccessor={ema10.accessor()} stroke={ema10.stroke()}/>\r\n\t\t}\r\n\t\tif(this.props.indicators[\"ema20\"]){\r\n\t\t\tlineseriesEma20 = <LineSeries yAccessor={ema20.accessor()} stroke={ema20.stroke()}/>\r\n\t\t}\r\n\r\n\r\n\t\tconst calculatedData = initialData;\r\n\t\tconst xScaleProvider = discontinuousTimeScaleProvider\r\n\t\t\t.inputDateAccessor(d => d.date);\r\n\t\tconst {\r\n\t\t\tdata,\r\n\t\t\txScale,\r\n\t\t\txAccessor,\r\n\t\t\tdisplayXAccessor,\r\n\t\t} = xScaleProvider(calculatedData);\r\n\r\n\t\t// const xAccessor = d => d.date;\r\n\t\tconst xExtents = [\r\n\t\t\txAccessor(last(data)),\r\n\t\t\txAccessor(data[Math.max(0, data.length - 100)])\r\n\t\t];\r\n\r\n\t\treturn (\r\n\t\t\t<ChartCanvas height={height}\t\t\t\t\r\n\t\t\t\t\twidth={width}\r\n\t\t\t\t\tratio={ratio}\r\n\t\t\t\t\tmargin={margin}\r\n\t\t\t\t\t//margin={{ left: 50, right: 50, top: 10, bottom: 30 }}\r\n\t\t\t\t\ttype={type}\r\n\t\t\t\t\tseriesName=\"MSFT\"\r\n\t\t\t\t\tdata={data}\r\n\t\t\t\t\txScale={xScale}\r\n\t\t\t\t\txAccessor={xAccessor}\r\n\t\t\t\t\tdisplayXAccessor={displayXAccessor}\r\n\t\t\t\t\txExtents={xExtents}\r\n\t\t\t\t>\r\n\r\n\t\t\t\t<Chart id={1} \r\n\t\t\t\t\tyExtents={[d => [d.high, d.low], ema20.accessor(), ema10.accessor()]} \r\n\t\t\t\t\tpadding={{ top: 10, bottom: 20 }}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<XAxis axisAt=\"bottom\" orient=\"bottom\" ticks={6}/>\r\n\t\t\t\t\t<YAxis axisAt=\"left\" orient=\"left\" ticks={5} />\r\n\t\t\t\t\t\r\n\t\t\t\t\t<MouseCoordinateX\r\n\t\t\t\t\t\tat=\"bottom\"\r\n\t\t\t\t\t\torient=\"bottom\"\r\n\t\t\t\t\t\tdisplayFormat={timeFormat(\"%Y-%m-%d\")} />\r\n\t\t\t\t\t<MouseCoordinateY\r\n\t\t\t\t\t\tat=\"right\"\r\n\t\t\t\t\t\torient=\"right\"\r\n\t\t\t\t\t\tdisplayFormat={format(\".2f\")} />\r\n\r\n\t\t\t\t\t<CandlestickSeries {...candlesAppearance}/>\r\n\t\t\t\t\t{lineseriesEma10}\r\n\t\t\t\t\t{lineseriesEma20}\r\n\r\n\t\t\t\t\t<CrossHairCursor />\r\n\t\t\t\t\t<InteractiveYCoordinate\r\n\t\t\t\t\t\t\tyCoordinateList={this.state.yCoordinateList}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t<InteractiveText\r\n\t\t\t\t\t\t\ttextList={this.state.textList}\r\n\t\t\t\t\t\t\tonDragComplete={this.onDrawComplete}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t</Chart>\r\n\t\t\t\t{/* to add new markers */}\r\n\t\t\t\t<DrawingObjectSelector\r\n\t\t\t\t\t\tenabled\r\n\t\t\t\t\t\tgetInteractiveNodes={this.getInteractiveNodes}\r\n\t\t\t\t\t\tdrawingObjectMap={{\r\n\t\t\t\t\t\t\tInteractiveYCoordinate: \"yCoordinateList\",\r\n\t\t\t\t\t\t\tInteractiveText: \"textList\"\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tonSelect={this.handleSelection}\r\n\t\t\t\t\t/>\r\n\t\t\t</ChartCanvas>\r\n\t\t);\r\n\t}\r\n\r\n\thandleSelection(interactives, moreProps, e) {\r\n\t\tif (this.state.enableInteractiveObject) {\r\n\t\t\tif(this.state.comparingMarkersActive > 1){\r\n\t\t\t\tthis.setState({ \r\n\t\t\t\t\tenableInteractiveObject: true,\r\n\t\t\t\t\tyCoordinateList: [],\r\n\t\t\t\t\ttextList: [],\r\n\t\t\t\t\tcomparingMarkersActive: 0\r\n\t\t\t\t });\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tconst independentCharts = moreProps.currentCharts.filter(d => d !== 2);\r\n\t\t\t\tif (independentCharts.length > 0) {\r\n\t\t\t\t\tconst first = head(independentCharts);\r\n\r\n\t\t\t\t\tconst morePropsForChart = getMorePropsForChart(moreProps, first);\r\n\t\t\t\t\tconst {\r\n\t\t\t\t\t\tmouseXY: [, mouseY],\r\n\t\t\t\t\t\tchartConfig: { yScale },\r\n\t\t\t\t\t\txAccessor,\r\n\t\t\t\t\t\tcurrentItem,\r\n\t\t\t\t\t} = morePropsForChart;\r\n\r\n\t\t\t\t\tlet yValue = round(yScale.invert(mouseY), 2);\r\n\t\t\t\t\t\r\n\t\t\t\t\t//get the difference between the markers\r\n\t\t\t\t\tif(this.state.yCoordinateList.length == 1){\r\n\t\t\t\t\t\tconst percentDiff = 100 * ( (yValue / this.state.yCoordinateList[0].yValue)-1 );\r\n\r\n\t\t\t\t\t\tconst position = [xAccessor(currentItem), yScale.invert(mouseY)];\r\n\t\t\t\t\t\tconst newText = {\r\n\t\t\t\t\t\t\t...InteractiveText.defaultProps.defaultText,\r\n\t\t\t\t\t\t\tposition,\r\n\t\t\t\t\t\t\ttext: round(percentDiff, 2) + '%',\r\n\t\t\t\t\t\t\t//textFill: (percentDiff >= 0? \"#10A015\" : \"#A01015\"),\r\n\t\t\t\t\t\t\ttextFill: (percentDiff >= 0? \"#50F055\" : \"#FFA5A5\"),\r\n\t\t\t\t\t\t\tbgFill: \"#303030\",\r\n\t\t\t\t\t\t\topacity: 0.2\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tthis.handleChooseTextPosition(newText, percentDiff, e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst newMarker = {\r\n\t\t\t\t\t\t...InteractiveYCoordinate.defaultProps.defaultPriceCoordinate,\r\n\t\t\t\t\t\tyValue,\r\n\t\t\t\t\t\tid: this.state.comparingMarkersActive + 1,\r\n\t\t\t\t\t\ttext: (this.state.yCoordinateList.length == 0? \"Start\" : \"End\"),\r\n\t\t\t\t\t\tstroke: (this.state.yCoordinateList.length == 0? \"#6574CD\" : \"#202020\"),\r\n\t\t\t\t\t\ttextFill: (this.state.yCoordinateList.length == 0? \"#6574CD\" : \"#202020\"),\r\n\t\t\t\t\t};\r\n\t\t\t\t\tnewMarker.edge.stroke = (this.state.yCoordinateList.length == 0? \"#6574CD\" : \"#202020\");\r\n\t\t\t\t\tthis.handleChoosePosition(newMarker, morePropsForChart, e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} \r\n\t}\r\n\r\n\thandleChooseTextPosition(text, value) {\r\n\t\t// this.componentWillUnmount();\r\n\t\t// const { id: chartId } = moreProps.chartConfig;\r\n\t\tthis.setState({\r\n\t\t\t[`textList`]: [\r\n\t\t\t\t...this.state[`textList`],\r\n\t\t\t\ttext\r\n\t\t\t],\r\n\t\t\tshowModal: true,\r\n\t\t\ttext: value,\r\n\t\t\tchartId: 1\r\n\t\t});\r\n\t}\r\n\r\n\thandleChoosePosition(marker, moreProps) {\r\n\t\t\r\n\t\t// const { id: chartId } = moreProps.chartConfig;\r\n\t\tthis.setState({\r\n\t\t\t// [`yCoordinateList_${chartId}`]: [\r\n\t\t\t// \t...this.state[`yCoordinateList_${chartId}`],\r\n\t\t\t// \tmarker\r\n\t\t\t// ],\r\n\t\t\t['yCoordinateList']: [\r\n\t\t\t\t...this.state['yCoordinateList'],\r\n\t\t\t\tmarker\r\n\t\t\t],\r\n\t\t\tcomparingMarkersActive: this.state.comparingMarkersActive + 1\r\n\t\t});\r\n\t\t\r\n\t}\r\n\tonDrawComplete(textList, moreProps) {\r\n\t\t// this gets called on\r\n\t\t// 1. draw complete of drawing object\r\n\t\t// 2. drag complete of drawing object\r\n\t\t// const { id: chartId } = moreProps.chartConfig;\r\n\t\r\n\t\tthis.setState({\r\n\t\t  enableInteractiveObject: false,\r\n\t\t  [`textList`]: textList\r\n\t\t});\r\n\t  }\r\n}\r\n\r\nCandleStickChart.propTypes = {\r\n\tdata: PropTypes.array.isRequired,\r\n\twidth: PropTypes.number.isRequired,\r\n\tratio: PropTypes.number.isRequired,\r\n\ttype: PropTypes.oneOf([\"svg\", \"hybrid\"]).isRequired,\r\n};\r\n\r\nCandleStickChart.defaultProps = {\r\n\ttype: \"svg\",\r\n};\r\nCandleStickChart = fitWidth(CandleStickChart);\r\n\r\nexport default CandleStickChart;\r\n","D:\\Trabalho\\React\\smartinvest_ui\\src\\charts\\ParseData.jsx",["102","103","104","105","106"],"\r\nimport { tsvParse, csvParse } from  \"d3-dsv\";\r\nimport { timeParse } from \"d3-time-format\";\r\nimport raw from \"raw.macro\";\r\n\r\nfunction parseData(parse) {\r\n\treturn function(d) {\r\n\t\td.date = parse(d.date);\r\n\t\td.open = +d.open;\r\n\t\td.high = +d.high;\r\n\t\td.low = +d.low;\r\n\t\td.close = +d.close;\r\n\t\td.volume = +d.volume;\r\n\r\n\t\treturn d;\r\n\t};\r\n}\r\nfunction parseSeriesJson(json, parse){\r\n\tlet content = json[\"Time Series (Daily)\"];\r\n\tif(!content)\r\n\t\treturn{};\r\n\r\n\tlet series = [];\r\n\t\r\n\tlet aux = Object.keys(content).reverse().forEach(day => {\r\n\t\tseries.push({\r\n\t\t\tdate : parse(day),\r\n\t\t\topen : parseFloat(content[day][\"1. open\"]),\r\n\t\t\thigh : parseFloat(content[day][\"2. high\"]),\r\n\t\t\tlow : parseFloat(content[day][\"3. low\"]),\r\n\t\t\tclose : parseFloat(content[day][\"4. close\"]),\r\n\t\t\tvolume : parseFloat(content[day][\"6. volume\"])\r\n\t\t})\r\n\t});\r\n\treturn {\r\n\t\t'data': series,\r\n\t\t'code': json[\"Meta Data\"][\"2. Symbol\"]\r\n\t};\r\n}\r\n\r\nconst parseDate = timeParse(\"%Y-%m-%d\");\r\n\r\n//OC8AZHP6EZ0ABFIW\r\nexport function getData(apiKey, assetCode) {\r\n\t// const promiseMSFT = fetch(\"https://cdn.rawgit.com/rrag/react-stockcharts/master/docs/data/MSFT.tsv\")\r\n\t// \t.then(response => response.text())\r\n\t// \t.then(data => csvParse(data, parseData(parseDate)))\r\n\t// const dataFile = raw(\"./data.csv\");\r\n\t// const promiseMSFT = csvParse(dataFile, parseData(parseDate))\r\n\t// const data = raw(\"./data.json\");\r\n\t// const promiseMSFT = parseSeriesJson(JSON.parse(data), parseDate);\r\n\tconst promiseMSFT = fetch(\"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=\"+assetCode+\".SA&apikey=\"+ apiKey +\"&outputsize=compact\")\r\n\t.then(response => response.text())\r\n\t.then(data => parseSeriesJson(JSON.parse(data), parseDate));\r\n\treturn promiseMSFT;\r\n}\r\n","D:\\Trabalho\\React\\smartinvest_ui\\src\\charts\\AssetSelector.jsx",["107"],"import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport { TextField } from '@material-ui/core';\r\n\r\nclass AssetSelector extends Component {\r\n    state = { assetCode:'', hasValue : true }\r\n    constructor(props) {\r\n        super(props);\r\n        this.changeAssetValue = this.changeAssetValue.bind(this);\r\n        this.confirmChange = this.confirmChange.bind(this);\r\n    }\r\n\r\n\r\n    render() { \r\n        return ( \r\n        <section style={{float: \"left\"}}>\r\n            {/* <label>Choose an asset:</label> */}\r\n            {/* <input style={{margin: \"5px\"}} onChange={this.changeAssetValue} type=\"text\" maxLength=\"6\" id=\"input_asset\" /> */}\r\n            <TextField style={{margin: \"5px\"}} label=\"Choose an Asset\" onChange={this.changeAssetValue} type=\"text\" maxLength=\"6\" id=\"input_asset\"></TextField>\r\n            <Button style={{\"marginTop\": \"15px\"}} disabled={this.state.hasValue} variant=\"outlined\" color=\"primary\" onClick={this.confirmChange} >Confirm</Button> \r\n        </section>);\r\n    }\r\n    changeAssetValue(event){\r\n        let _hasValue = event.target.value == \"\" \r\n        this.setState({assetCode : event.target.value, hasValue : _hasValue});\r\n\r\n    }\r\n\r\n    confirmChange(){\r\n        console.log(this.props.assetSelectedHandler);\r\n        this.props.assetSelectedHandler(this.state.assetCode)\r\n        // this.setState({value: event.target.value});\r\n    }\r\n}\r\n \r\nexport default AssetSelector;","D:\\Trabalho\\React\\smartinvest_ui\\src\\charts\\interactiveutils.js",[],"D:\\Trabalho\\React\\smartinvest_ui\\src\\charts\\ChartOptions\\ChartOptions.jsx",[],"D:\\Trabalho\\React\\smartinvest_ui\\src\\common\\CrudTable\\CrudTable.jsx",[],"D:\\Trabalho\\React\\smartinvest_ui\\src\\common\\CrudTable\\CrudTableTitle\\CrudTableTitle.jsx",[],"D:\\Trabalho\\React\\smartinvest_ui\\src\\common\\CrudTable\\CrudTableHeader\\CrudTableHeader.jsx",[],"D:\\Trabalho\\React\\smartinvest_ui\\src\\common\\CrudTable\\CrudAddModal\\CrudAddModal.jsx",["108","109","110","111","112","113"],"import { Modal } from 'react-bootstrap';\r\nimport React, { Component } from 'react';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField } from '@material-ui/core';\r\n\r\nclass CrudAddModal extends Component {\r\n    constructor(props) {\r\n        //console.log(\"constructor\", props.open)\r\n        super(props);\r\n        this.state = {\r\n            newItem : {}\r\n        }\r\n        this.handleAdd = this.handleAdd.bind(this)\r\n        this.handleInput = this.handleInput.bind(this)\r\n    }\r\n    // componentWillReceiveProps(newProps) {\r\n    //     this.setState({open: newProps.open})\r\n    // }\r\n    // handleClickOpen () {\r\n    //     this.setState({open: true});\r\n    // };\r\n    handleAdd(event){\r\n        event.preventDefault();\r\n        console.log(this.state);\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(this.state.newItem)\r\n        };\r\n        fetch(this.props.backendUrl, requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(`New ${this.props.itemType} added`)\r\n                console.log(data)\r\n                this.state.newItem.id = data.id\r\n                this.props.handleAddToTable(true, this.state.newItem)\r\n            })\r\n            .catch(e => {\r\n                console.error(`Error trying to add new ${this.props.itemType}!`)\r\n                this.props.handleAddToTable(false, null)\r\n            })\r\n    }\r\n\r\n    handleInput(event){\r\n        const name = event.target.id;\r\n        const newValue = event.target.value;\r\n        this.setState({ \r\n            newItem : {\r\n                ...this.state.newItem, \r\n                [name]: newValue} });\r\n    };\r\n\r\n    render() {\r\n        const handleClose = () => {\r\n            this.props.handleAddToTable(false, null)\r\n        };  \r\n        // const handleAdd = () => {\r\n        //     console.log(this.state.value)\r\n        // }\r\n        const text = \"\";\r\n        return (\r\n            <div>\r\n                {/* <Button variant=\"outlined\" color=\"primary\" onClick={this.handleClickOpen}>\r\n                    Open form dialog\r\n                </Button> */}\r\n                <Dialog open={this.props.open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                    <form onSubmit={this.handleAdd}>\r\n                        <DialogTitle id=\"form-dialog-title\">Add {this.props.itemType}</DialogTitle>\r\n                        <DialogContent>\r\n                        {text}\r\n                        {this.props.itemFields.filter(f => f.isInput != false).map( (field, i) =>{\t\r\n                            switch(field.type){\r\n                                case 'date':\r\n                                    return (\t\r\n                                        <TextField\r\n                                        key={field.name}\r\n                                        autoFocus={(i==0 ? true : undefined)}\r\n                                        margin=\"dense\"\r\n                                        id={field.name}\r\n                                        label={field.label}\r\n                                        onChange={this.handleInput}\r\n                                        type={field.type}\r\n                                        InputLabelProps={{\r\n                                            shrink: true,\r\n                                            }}\r\n                                        />\t\t\r\n                                        \r\n                                    );\r\n                                default:\r\n                                    return (\t\r\n                                        <TextField\r\n                                        key={field.name}\r\n                                        autoFocus={(i==0 ? true : undefined)}\r\n                                        margin=\"dense\"\r\n                                        id={field.name}\r\n                                        onChange={this.handleInput}\r\n                                        label={field.label}\r\n                                        type={field.type}\r\n                                        fullWidth\r\n                                        // {field.size? field.size : fullWidth}\r\n                                        />\t\t\r\n                                        //  required={field.isRequired} />\r\n                                        \r\n                                    );\r\n                            }\r\n                        }) }\t\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={handleClose} color=\"primary\">\r\n                                Cancel\r\n                            </Button>\r\n                            <Button type=\"submit\" color=\"primary\">\r\n                                Add\r\n                            </Button>\r\n                        </DialogActions>\r\n                    \r\n                    </form>\r\n                </Dialog>\r\n            </div>\r\n\r\n         );\r\n    }\r\n}\r\n\r\n\r\n \r\nexport default CrudAddModal;","D:\\Trabalho\\React\\smartinvest_ui\\src\\common\\CrudTable\\CrudTableRow\\CrudTableRow.jsx",[],"D:\\Trabalho\\React\\smartinvest_ui\\src\\common\\CrudTable\\CrudDeleteItemModal\\CrudDeleteItemModal.jsx",[],"D:\\Trabalho\\React\\smartinvest_ui\\src\\BatchOperations\\SavePortfolio.jsx",["114","115","116","117","118"],"\r\nimport { tsvParse, csvParse } from  \"d3-dsv\";\r\nimport { timeParse } from \"d3-time-format\";\r\nimport raw from \"raw.macro\";\r\n\r\nfunction parseData(parse) {\r\n\treturn function(d) {\r\n\t\td.date = parse(d.date);\r\n\t\td.high = +d.high;\r\n\t\td.low = +d.low;\r\n\t\td.close = +d.close;\r\n\t\td.volume = +d.volume;\r\n\r\n\t\treturn d;\r\n\t};\r\n}\r\nfunction parseSeriesJson(json, parse){\r\n\tlet content = json[\"Time Series (Daily)\"];\r\n\tif(!content)\r\n\t\treturn{};\r\n\r\n\tlet series = [];\r\n\t\r\n\tlet aux = Object.keys(content).reverse().forEach(day => {\r\n\t\tseries.push({\r\n\t\t\tdate : parse(day),\r\n\t\t\topen : parseFloat(content[day][\"1. open\"]),\r\n\t\t\thigh : parseFloat(content[day][\"2. high\"]),\r\n\t\t\tlow : parseFloat(content[day][\"3. low\"]),\r\n\t\t\tclose : parseFloat(content[day][\"4. close\"]),\r\n\t\t\tvolume : parseFloat(content[day][\"6. volume\"])\r\n\t\t})\r\n\t});\r\n\treturn {\r\n\t\t'data': series,\r\n\t\t'code': json[\"Meta Data\"][\"2. Symbol\"]\r\n\t};\r\n}\r\n\r\nconst parseDate = timeParse(\"%Y-%m-%d\");\r\n\r\n//OC8AZHP6EZ0ABFIW\r\nexport function convertPortfolioData(apiKey, assetCode) {\r\n\t// const promiseMSFT = fetch(\"https://cdn.rawgit.com/rrag/react-stockcharts/master/docs/data/MSFT.tsv\")\r\n\t// \t.then(response => response.text())\r\n\t// \t.then(data => csvParse(data, parseData(parseDate)))\r\n\tconst dataFile = raw(\"./dividends.csv\");\r\n    let data = csvParse(dataFile)\r\n    const element = document.createElement(\"a\");\r\n    const file = new Blob([JSON.stringify(data)], {type: 'text/plain'});\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = \"myFile.txt\";\r\n    document.body.appendChild(element); // Required for this to work in FireFox\r\n    element.click();\r\n    // .then(response => response.text())\r\n\t// const promiseMSFT = csvParse(dataFile, parseData(parseDate))\r\n\t// const data = raw(\"./data.json\");\r\n\t// const promiseMSFT = parseSeriesJson(JSON.parse(data), parseDate);\r\n\t// const promiseMSFT = fetch(\"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=\"+assetCode+\".SA&apikey=\"+ apiKey +\"&outputsize=compact\")\r\n\t// .then(response => response.text())\r\n\t// .then(data => JSON.parse(data));\r\n\t// return promiseMSFT;\r\n}\r\n","D:\\Trabalho\\React\\smartinvest_ui\\src\\MainMenu.jsx",["119","120","121","122","123","124","125","126","127"],"D:\\Trabalho\\React\\smartinvest_ui\\src\\tables\\transactions\\Transactions.jsx",["128"],"import React, { Component } from 'react';\r\n// import CrudTableTitle from '../common/CrudTable/CrudTableTitle/CrudTableTitle';\r\n// import CrudTableHeader from '../common/CrudTable/CrudTableHeader/CrudTableHeader';\r\n// import Transaction from './Transaction';\r\nimport CrudTable from '../../common/CrudTable/CrudTable';\r\n\r\nclass Transactions extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.getTransactions = this.getTransactions.bind(this);\r\n        this.state = { \r\n            transactions: [],\r\n            fields: [\r\n                {\r\n                    name: \"asset\",\r\n                    label: \"Code\",\r\n                    type: \"text\",\r\n                    isInput: true,\r\n                },{\r\n                    name: \"type\",\r\n                    label: \"Action\",\r\n                    type: \"text\",\r\n                    isRequired: true\r\n                },{\r\n                    name: \"price\",\r\n                    label: \"Price\",\r\n                    type: \"float\",\r\n                    isInput: true\r\n                },{\r\n                    name: \"shares_number\",\r\n                    label: \"Amount\",\r\n                    type: \"int\",\r\n                    isInput: true\r\n                },{\r\n                    name: \"date\",\r\n                    label: \"Date\",\r\n                    type: \"date\",\r\n                    isInput: true\r\n                }\r\n            ]\r\n        };\r\n    }\r\n\r\n    getTransactions(){\r\n        return fetch(process.env.REACT_APP_BACKEND_TRANSACTIONS+'?page=0&size=10&sort=date,desc')\r\n        .then(res => res.json())\r\n        .then((data) => {\r\n            console.log(`Transactions loaded ${(data.content? data.content.length :\"\")}`)\r\n            console.log(data.content);\r\n            return data.content\r\n        })\r\n        .catch(e => console.log(\"Error loading transactions!\"))\r\n    }\r\n\r\n    formatDate(date){\r\n        if(!date || date.length != 3)\r\n            return \"\";\r\n        // \r\n        const dd = (date[2]<10 ? \"0\"+date[2] : date[2]) \r\n        const mm = (date[1]<10 ? \"0\"+date[1] : date[1])\r\n        const yy = date[0]\r\n        return `${dd}/${mm}/${yy}`;\r\n    }\r\n\r\n    render() { \r\n        \r\n        return ( \r\n            <section className=\"block_unit-7\" \r\n                style={{\"float\": \"left\"}}>\r\n                <CrudTable\r\n                    key=\"Table-Transactions\"\r\n                    itemType={\"Transaction\"}\r\n                    fields={this.state.fields}\r\n                    getItems={this.getTransactions}\r\n                    backendUrl={process.env.REACT_APP_BACKEND_TRANSACTIONS}\r\n                >\r\n                    {/* {this.state.assets.map((asset, i) =>{\r\n                        return (\r\n                            <Asset key={i} id={asset.id} code={asset.code} />\r\n                        );\r\n                    } )} */}\r\n                </CrudTable>\r\n            </section>\r\n\r\n            // <section className=\"block_unit-7\" style={{\"float\": \"left\"}}>\r\n            //     <CrudTableTitle title=\"Transactions\" />\r\n            //     <div id=\"table-scroll\" style={{\"float\": \"left\"}}>\r\n            //         <table className=\"custom-table table-striped table-hover\">\r\n            //         <CrudTableHeader headers={[\"Code\", \"Action\", \"Price\", \"Amount\", \"Date\"]}/>\r\n            //         <tbody>\r\n            //             {this.state.transactions.map((transaction, i) =>{\r\n            //                 return (\r\n            //                     <Transaction key={i} {...transaction} />\r\n            //                 );\r\n            //             } )}\r\n            //         </tbody>\r\n            //         </table>\r\n            //     </div>\r\n            //     {/* <div style={{\"height\" : \"200px\",\"width\" : \"200px\", \"background-color\": \"red\", float: \"left\" }}></div> */}\r\n            // </section>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Transactions;","D:\\Trabalho\\React\\smartinvest_ui\\src\\tables\\assets\\Assets.jsx",[],"D:\\Trabalho\\React\\smartinvest_ui\\src\\menu\\Menu.jsx",["129"],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":7,"column":10,"nodeType":"136","messageId":"137","endLine":7,"endColumn":21},{"ruleId":"134","severity":1,"message":"138","line":77,"column":9,"nodeType":"136","messageId":"137","endLine":77,"endColumn":19},{"ruleId":"134","severity":1,"message":"139","line":78,"column":9,"nodeType":"136","messageId":"137","endLine":78,"endColumn":18},{"ruleId":"134","severity":1,"message":"140","line":80,"column":9,"nodeType":"136","messageId":"137","endLine":80,"endColumn":17},{"ruleId":"141","severity":1,"message":"142","line":225,"column":43,"nodeType":"143","messageId":"144","endLine":225,"endColumn":45},{"ruleId":"141","severity":1,"message":"142","line":245,"column":48,"nodeType":"143","messageId":"144","endLine":245,"endColumn":50},{"ruleId":"141","severity":1,"message":"142","line":246,"column":50,"nodeType":"143","messageId":"144","endLine":246,"endColumn":52},{"ruleId":"141","severity":1,"message":"142","line":247,"column":52,"nodeType":"143","messageId":"144","endLine":247,"endColumn":54},{"ruleId":"141","severity":1,"message":"142","line":249,"column":65,"nodeType":"143","messageId":"144","endLine":249,"endColumn":67},{"ruleId":"145","severity":1,"message":"146","line":279,"column":4,"nodeType":"147","messageId":"148","endLine":282,"endColumn":5,"fix":"149"},{"ruleId":"134","severity":1,"message":"150","line":2,"column":10,"nodeType":"136","messageId":"137","endLine":2,"endColumn":18},{"ruleId":"134","severity":1,"message":"151","line":2,"column":20,"nodeType":"136","messageId":"137","endLine":2,"endColumn":28},{"ruleId":"134","severity":1,"message":"152","line":4,"column":8,"nodeType":"136","messageId":"137","endLine":4,"endColumn":11},{"ruleId":"134","severity":1,"message":"153","line":6,"column":10,"nodeType":"136","messageId":"137","endLine":6,"endColumn":19},{"ruleId":"134","severity":1,"message":"154","line":25,"column":6,"nodeType":"136","messageId":"137","endLine":25,"endColumn":9},{"ruleId":"141","severity":1,"message":"142","line":24,"column":44,"nodeType":"143","messageId":"144","endLine":24,"endColumn":46},{"ruleId":"134","severity":1,"message":"155","line":1,"column":10,"nodeType":"136","messageId":"137","endLine":1,"endColumn":15},{"ruleId":"134","severity":1,"message":"156","line":3,"column":56,"nodeType":"136","messageId":"137","endLine":3,"endColumn":73},{"ruleId":"157","severity":1,"message":"158","line":34,"column":17,"nodeType":"159","endLine":34,"endColumn":35},{"ruleId":"141","severity":1,"message":"160","line":70,"column":70,"nodeType":"143","messageId":"144","endLine":70,"endColumn":72},{"ruleId":"141","severity":1,"message":"142","line":76,"column":54,"nodeType":"143","messageId":"144","endLine":76,"endColumn":56},{"ruleId":"141","severity":1,"message":"142","line":92,"column":54,"nodeType":"143","messageId":"144","endLine":92,"endColumn":56},{"ruleId":"134","severity":1,"message":"150","line":2,"column":10,"nodeType":"136","messageId":"137","endLine":2,"endColumn":18},{"ruleId":"134","severity":1,"message":"153","line":6,"column":10,"nodeType":"136","messageId":"137","endLine":6,"endColumn":19},{"ruleId":"134","severity":1,"message":"161","line":17,"column":10,"nodeType":"136","messageId":"137","endLine":17,"endColumn":25},{"ruleId":"134","severity":1,"message":"154","line":24,"column":6,"nodeType":"136","messageId":"137","endLine":24,"endColumn":9},{"ruleId":"134","severity":1,"message":"162","line":40,"column":7,"nodeType":"136","messageId":"137","endLine":40,"endColumn":16},{"ruleId":"134","severity":1,"message":"163","line":5,"column":8,"nodeType":"136","messageId":"137","endLine":5,"endColumn":14},{"ruleId":"134","severity":1,"message":"164","line":6,"column":8,"nodeType":"136","messageId":"137","endLine":6,"endColumn":15},{"ruleId":"134","severity":1,"message":"165","line":8,"column":8,"nodeType":"136","messageId":"137","endLine":8,"endColumn":19},{"ruleId":"134","severity":1,"message":"166","line":9,"column":8,"nodeType":"136","messageId":"137","endLine":9,"endColumn":18},{"ruleId":"134","severity":1,"message":"167","line":12,"column":8,"nodeType":"136","messageId":"137","endLine":12,"endColumn":16},{"ruleId":"134","severity":1,"message":"168","line":19,"column":8,"nodeType":"136","messageId":"137","endLine":19,"endColumn":16},{"ruleId":"134","severity":1,"message":"169","line":89,"column":9,"nodeType":"136","messageId":"137","endLine":89,"endColumn":14},{"ruleId":"141","severity":1,"message":"142","line":129,"column":65,"nodeType":"143","messageId":"144","endLine":129,"endColumn":67},{"ruleId":"141","severity":1,"message":"142","line":139,"column":85,"nodeType":"143","messageId":"144","endLine":139,"endColumn":87},{"ruleId":"141","severity":1,"message":"160","line":56,"column":33,"nodeType":"143","messageId":"144","endLine":56,"endColumn":35},{"ruleId":"134","severity":1,"message":"170","line":2,"column":10,"nodeType":"136","messageId":"137","endLine":2,"endColumn":16},"no-native-reassign",["171"],"no-negated-in-lhs",["172"],"no-unused-vars","'TypeChooser' is defined but never used.","Identifier","unusedVar","'gridHeight' is assigned a value but never used.","'gridWidth' is assigned a value but never used.","'showGrid' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-computed-key","Unnecessarily computed property ['yCoordinateList'] found.","Property","unnecessarilyComputedProperty",{"range":"173","text":"174"},"'tsvParse' is defined but never used.","'csvParse' is defined but never used.","'raw' is defined but never used.","'parseData' is defined but never used.","'aux' is assigned a value but never used.","'Modal' is defined but never used.","'DialogContentText' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","Expected '!==' and instead saw '!='.","'parseSeriesJson' is defined but never used.","'parseDate' is assigned a value but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'CssBaseline' is defined but never used.","'Typography' is defined but never used.","'MenuIcon' is defined but never used.","'MailIcon' is defined but never used.","'theme' is assigned a value but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation",[8384,8403],"'yCoordinateList'"]